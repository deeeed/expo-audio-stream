(self.webpackChunk_siteed_expo_audio_ui=self.webpackChunk_siteed_expo_audio_ui||[]).push([[507],{"./node_modules/@siteed/react-native-logger/dist/logger.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{addLog:()=>addLog,clearLogs:()=>clearLogs,enabled:()=>enabled,getLogger:()=>getLogger,getLoggerConfig:()=>getLoggerConfig,getLogs:()=>getLogs,initializeDebugSettings:()=>initializeDebugSettings,reset:()=>logger_core_reset,setLoggerConfig:()=>setLoggerConfig,setNamespaces:()=>setNamespaces});const state={enabledNamespaces:[],logsArray:[],config:{maxLogs:100,namespaces:""},loggersMap:new Map},coerceToString=param=>{if(void 0===param)return"";if("string"==typeof param)return param;try{return JSON.stringify(param)}catch(e){return((obj,space)=>{const cache=new Set,result=JSON.stringify(obj,((_key,value)=>{if("object"==typeof value&&null!==value){if(cache.has(value))return"[Circular]";cache.add(value)}return value}),space);return cache.clear(),result})(param)}},addLog=({namespace,level,params=[]})=>{if(!enabled(namespace))return;const[message,...restParams]=params;let messageWithNamespace=`[${namespace}] `,hasStringMessage=!1;"string"==typeof message?(messageWithNamespace=`[${namespace}] ${message}`,hasStringMessage=!0):message instanceof Error&&(messageWithNamespace=`[${namespace}] ${message.stack??message.message}`,hasStringMessage=!0);const sParams=coerceToString(hasStringMessage?restParams:params),newLog={message:`[${level.toUpperCase()}] ${messageWithNamespace} ${sParams}`,namespace,timestamp:Date.now()};state.logsArray=[...state.logsArray,newLog],state.logsArray.length>state.config.maxLogs&&(state.logsArray=state.logsArray.slice(-state.config.maxLogs));const toLogParams=hasStringMessage?restParams:params;switch(level){case"debug":console.debug(messageWithNamespace,...toLogParams);break;case"info":console.info(messageWithNamespace,...toLogParams);break;case"warn":console.warn(messageWithNamespace,...toLogParams);break;case"error":console.error(messageWithNamespace,...toLogParams);break;default:console.log(messageWithNamespace,...toLogParams)}},enabled=namespace=>{for(const name of state.enabledNamespaces)if(namespace===name||namespace.startsWith(name.replace("*","")))return!0;return!1},setNamespaces=namespaces=>{const split=namespaces.split(/[\s,]+/);state.enabledNamespaces=[];for(const ns of split)ns&&state.enabledNamespaces.push(ns)},getLogs=()=>state.logsArray,clearLogs=()=>{state.logsArray=[]},logger_core_reset=()=>{clearLogs(),setLoggerConfig({maxLogs:100,namespaces:""}),initializeDebugSettings()},setLoggerConfig=newConfig=>{state.config={...state.config,...newConfig},void 0!==newConfig.namespaces&&setNamespaces(newConfig.namespaces)},getLoggerConfig=()=>state.config,getLogger=namespace=>{if(state.loggersMap.has(namespace))return state.loggersMap.get(namespace);const logger={log:(...params)=>addLog({namespace,level:"log",params}),info:(...params)=>addLog({namespace,level:"info",params}),debug:(...params)=>addLog({namespace,level:"debug",params}),warn:(...params)=>addLog({namespace,level:"warn",params}),error:(...params)=>addLog({namespace,level:"error",params}),extend:subNamespace=>getLogger(`${namespace}:${subNamespace}`)};return state.loggersMap.set(namespace,logger),logger},initializeDebugSettings=()=>{let debugSetting="";!{}.DEBUG?"undefined"!=typeof window&&window.localStorage&&(debugSetting=window.localStorage.getItem("DEBUG")||""):debugSetting={}.DEBUG,debugSetting&&(state.config.namespaces=debugSetting,setNamespaces(debugSetting))};initializeDebugSettings()},"./src/AudioVisualizer/AudioVisualizers.helpers.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{var _interopRequireDefault=__webpack_require__("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateActivePoints=exports.syncTranslateX=exports.drawDottedLine=exports.createDefaultTheme=exports.calculateReferenceLinePosition=void 0;var _toConsumableArray2=_interopRequireDefault(__webpack_require__("./node_modules/@babel/runtime/helpers/toConsumableArray.js")),_reactNativeSkia=__webpack_require__("./node_modules/@shopify/react-native-skia/lib/module/index.js"),_reactNativeLogger=__webpack_require__("./node_modules/@siteed/react-native-logger/dist/logger.js"),_reactNativeReanimated=__webpack_require__("./node_modules/react-native-reanimated/lib/module/index.js"),_constants=__webpack_require__("./src/constants.tsx"),logger=(exports.calculateReferenceLinePosition=function calculateReferenceLinePosition(_ref){var canvasWidth=_ref.canvasWidth;return"RIGHT"===_ref.referenceLinePosition?canvasWidth-15:canvasWidth/2},(0,_reactNativeLogger.getLogger)("AudioVisualiser.helpers"));exports.createDefaultTheme=function createDefaultTheme(canvasWidth,referenceLineX){return{container:{justifyContent:"center",alignItems:"center"},navigationContainer:{width:"100%",alignItems:"center"},canvasContainer:{width:canvasWidth,backgroundColor:"#292a2d",justifyContent:"center",alignItems:"center",gap:5},referenceLine:{position:"absolute",top:0,bottom:0,left:referenceLineX,width:2,backgroundColor:"red"},text:{color:"black"},button:{},buttonText:{},dottedLineColor:"grey",yAxis:{tickColor:_constants.DEFAULT_TICK_COLOR,labelColor:_constants.DEFAULT_LABEL_COLOR},timeRuler:{tickColor:_constants.DEFAULT_TICK_COLOR,labelColor:_constants.DEFAULT_LABEL_COLOR},candle:{activeAudioColor:_constants.CANDLE_ACTIVE_AUDIO_COLOR,activeSpeechColor:_constants.CANDLE_ACTIVE_SPEECH_COLOR,offcanvasColor:_constants.CANDLE_OFFCANVAS_COLOR,selectedColor:_constants.CANDLE_SELECTED_COLOR}}},exports.syncTranslateX=function syncTranslateX(_ref2){var currentTime=_ref2.currentTime,durationMs=_ref2.durationMs,maxTranslateX=_ref2.maxTranslateX,translateX=_ref2.translateX;if(durationMs){var x=-(1e3*currentTime/durationMs)*maxTranslateX;return translateX.value=(0,_reactNativeReanimated.withSpring)(x,{damping:20,stiffness:90}),x}return translateX.value},exports.drawDottedLine=function drawDottedLine(_ref3){for(var canvasWidth=_ref3.canvasWidth,canvasHeight=_ref3.canvasHeight,path=_reactNativeSkia.Skia.Path.Make(),baseline=canvasHeight/2,x=0;x<canvasWidth;x+=8)path.moveTo(x,baseline),path.lineTo(x+3,baseline);return path},exports.updateActivePoints=function updateActivePoints(_ref4){var _activePoints$,_activePoints2,x=_ref4.x,context=_ref4.context,dataPoints=context.dataPoints,activePoints=context.activePoints,maxDisplayedItems=context.maxDisplayedItems,referenceLineX=context.referenceLineX,mode=context.mode,range=context.range,candleWidth=context.candleWidth,candleSpace=context.candleSpace;if(0===dataPoints.length)return{activePoints,range,lastUpdatedTranslateX:x};logger.debug(`Updating active points x=${x}, mode=${mode}, dataPoints.length=${dataPoints.length}, activePoints.length=${activePoints.length}, referenceLineX=${referenceLineX}, maxDisplayedItems=${maxDisplayedItems}`);var result={activePoints:[],range:{start:0,end:0,startVisibleIndex:0,endVisibleIndex:0},lastUpdatedTranslateX:x},lastPointIndex=-1;if("live"===mode){var _activePoints$id,_activePoints,totalItems=dataPoints.length,liveMaxDisplayedItems=Math.floor(referenceLineX/(candleWidth+candleSpace)),startIndex=Math.max(0,totalItems-liveMaxDisplayedItems),updatedPoints=(0,_toConsumableArray2.default)(activePoints),addedPointsCount=0,lastUpdatedPointId=null!=(_activePoints$id=null==(_activePoints=activePoints[activePoints.length-1])?void 0:_activePoints.id)?_activePoints$id:-1;logger.log(`Last updated point ID: ${lastUpdatedPointId} activePoints.length=${activePoints.length}`);for(var i=dataPoints.length-1;i>=0;i--)if(dataPoints[i].id===lastUpdatedPointId){lastPointIndex=i;break}logger.log(`Last point index: ${lastPointIndex}`);for(var _i=0;_i<liveMaxDisplayedItems;_i++){var itemIndex=startIndex+_i,dataPoint=dataPoints[itemIndex];if(!dataPoint)break;itemIndex>lastPointIndex&&(updatedPoints.push(Object.assign({},dataPoint,{visible:!0})),addedPointsCount++)}logger.log(`Live mode: Updated ${updatedPoints.length} active points`,updatedPoints);var finalUpdatedPoints=updatedPoints.slice(-liveMaxDisplayedItems);result.activePoints=(0,_toConsumableArray2.default)(finalUpdatedPoints),logger.log(`Live mode: Updated ${finalUpdatedPoints.length} active points`,finalUpdatedPoints),logger.log(`Number of new points added: ${addedPointsCount}`)}else{for(var translateX=Math.abs(x),rawHiddenItemsLeft=Math.floor(translateX/(candleWidth+candleSpace)),itemsOffset=Math.floor(maxDisplayedItems/2),hiddenItemsLeft=Math.max(0,rawHiddenItemsLeft-itemsOffset),_startIndex=Math.max(0,hiddenItemsLeft-maxDisplayedItems),startVisibleIndex=_startIndex+Math.min(hiddenItemsLeft,maxDisplayedItems),endIndex=_startIndex+3*maxDisplayedItems,endVisibleIndex=startVisibleIndex+maxDisplayedItems,loopTo=3*maxDisplayedItems,_i2=0;_i2<loopTo;_i2++){var _itemIndex=_startIndex+_i2,_dataPoint=dataPoints[_itemIndex];if(_dataPoint){var visible=_itemIndex>=startVisibleIndex&&_itemIndex<=endVisibleIndex;activePoints[_i2]=Object.assign({},_dataPoint,{visible})}else activePoints[_i2]={amplitude:0,id:-1,visible:!1}}result.activePoints=(0,_toConsumableArray2.default)(activePoints),result.range={start:_startIndex,end:endIndex,startVisibleIndex,endVisibleIndex},logger.debug(`Range updated: start=${_startIndex}, end=${endIndex}, startVisibleIndex=${startVisibleIndex}, endVisibleIndex=${endVisibleIndex}`)}return logger.debug(`Active points updated. First point ID: ${null==(_activePoints$=activePoints[0])?void 0:_activePoints$.id}, Last point ID: ${null==(_activePoints2=activePoints[activePoints.length-1])?void 0:_activePoints2.id}`),result}},"./src/constants.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{var _interopRequireDefault=__webpack_require__("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(exports,"__esModule",{value:!0}),exports.isWeb=exports.defaultCandleColors=exports.DEFAULT_TICK_COLOR=exports.DEFAULT_LABEL_COLOR=exports.CANDLE_SELECTED_COLOR=exports.CANDLE_OFFCANVAS_COLOR=exports.CANDLE_ACTIVE_SPEECH_COLOR=exports.CANDLE_ACTIVE_AUDIO_COLOR=void 0;var _Platform=_interopRequireDefault(__webpack_require__("./node_modules/react-native-web/dist/exports/Platform/index.js")),CANDLE_ACTIVE_AUDIO_COLOR=(exports.isWeb="web"===_Platform.default.OS,exports.CANDLE_ACTIVE_AUDIO_COLOR="rgba(74, 144, 226, 1)"),CANDLE_ACTIVE_SPEECH_COLOR=exports.CANDLE_ACTIVE_SPEECH_COLOR="rgba(114, 191, 106, 1)",CANDLE_SELECTED_COLOR=exports.CANDLE_SELECTED_COLOR="rgba(255, 99, 71, 1)",CANDLE_OFFCANVAS_COLOR=exports.CANDLE_OFFCANVAS_COLOR="rgba(211, 211, 211, 1)";exports.DEFAULT_TICK_COLOR="white",exports.DEFAULT_LABEL_COLOR="white",exports.defaultCandleColors={activeAudioColor:CANDLE_ACTIVE_AUDIO_COLOR,activeSpeechColor:CANDLE_ACTIVE_SPEECH_COLOR,offcanvasColor:CANDLE_OFFCANVAS_COLOR,selectedColor:CANDLE_SELECTED_COLOR}}}]);