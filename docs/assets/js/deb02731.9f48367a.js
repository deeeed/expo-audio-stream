"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[5353],{641:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"api-reference/audio-devices","title":"Audio Device Detection & Selection","description":"The @siteed/expo-audio-studio library provides a comprehensive API for detecting, examining, and selecting audio input devices across iOS, Android, and web platforms.","source":"@site/docs/api-reference/audio-devices.md","sourceDirName":"api-reference","slug":"/api-reference/audio-devices","permalink":"/expo-audio-stream/docs/api-reference/audio-devices","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"audio-devices","title":"Audio Device Detection & Selection","sidebar_label":"Audio Devices"}}');var s=n(4848),t=n(8453);const o={id:"audio-devices",title:"Audio Device Detection & Selection",sidebar_label:"Audio Devices"},r="Audio Device Detection & Selection",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Core Types",id:"core-types",level:2},{value:"AudioDevice",id:"audiodevice",level:3},{value:"AudioDeviceCapabilities",id:"audiodevicecapabilities",level:3},{value:"DeviceDisconnectionBehavior",id:"devicedisconnectionbehavior",level:3},{value:"React Hook: useAudioDevices",id:"react-hook-useaudiodevices",level:2},{value:"AudioDeviceSelector Component",id:"audiodeviceselector-component",level:2},{value:"Using with Recording",id:"using-with-recording",level:2},{value:"Low-Level API",id:"low-level-api",level:2},{value:"Platform Considerations",id:"platform-considerations",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Web",id:"web",level:3},{value:"Best Practices",id:"best-practices",level:2}];function l(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"audio-device-detection--selection",children:"Audio Device Detection & Selection"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"@siteed/expo-audio-studio"})," library provides a comprehensive API for detecting, examining, and selecting audio input devices across iOS, Android, and web platforms."]}),"\n",(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"This API allows you to:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"Enumerate all available audio input devices on the device"}),"\n",(0,s.jsx)(i.li,{children:"View detailed device capabilities (sample rates, channels, bit depths)"}),"\n",(0,s.jsx)(i.li,{children:"Select a specific device for recording"}),"\n",(0,s.jsx)(i.li,{children:"Handle device disconnection gracefully"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"core-types",children:"Core Types"}),"\n",(0,s.jsx)(i.h3,{id:"audiodevice",children:"AudioDevice"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"AudioDevice"})," interface represents an audio input device:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"interface AudioDevice {\n  id: string;                     // Unique device identifier \n  name: string;                   // Human-readable device name\n  type: string;                   // Device type (builtin_mic, bluetooth, usb, wired, etc.)\n  isDefault: boolean;             // Whether this is the system default device\n  capabilities: AudioDeviceCapabilities;\n  isAvailable: boolean;           // Whether device is currently available\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"audiodevicecapabilities",children:"AudioDeviceCapabilities"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"AudioDeviceCapabilities"})," interface provides information about what a device supports:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"interface AudioDeviceCapabilities {\n  sampleRates: number[];          // Supported sample rates\n  channelCounts: number[];        // Supported channel counts\n  bitDepths: number[];            // Supported bit depths\n  hasEchoCancellation?: boolean;  // Echo cancellation support\n  hasNoiseSuppression?: boolean;  // Noise suppression support\n  hasAutomaticGainControl?: boolean; // AGC support\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"devicedisconnectionbehavior",children:"DeviceDisconnectionBehavior"}),"\n",(0,s.jsx)(i.p,{children:"Defines how recording should behave when a device becomes unavailable:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"const DeviceDisconnectionBehavior = {\n  PAUSE: 'pause',                // Pause recording when device disconnects\n  FALLBACK: 'fallback'           // Switch to default device and continue recording\n} as const;\n\ntype DeviceDisconnectionBehaviorType = \n  typeof DeviceDisconnectionBehavior[keyof typeof DeviceDisconnectionBehavior];\n"})}),"\n",(0,s.jsx)(i.h2,{id:"react-hook-useaudiodevices",children:"React Hook: useAudioDevices"}),"\n",(0,s.jsxs)(i.p,{children:["The easiest way to integrate audio device detection and selection is with the ",(0,s.jsx)(i.code,{children:"useAudioDevices"})," hook:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"import { useAudioDevices } from '@siteed/expo-audio-studio';\n\nfunction MyComponent() {\n  const {\n    devices,             // Array of available devices\n    currentDevice,       // Currently selected device\n    loading,             // Loading state\n    error,               // Error state\n    selectDevice,        // Function to select a device\n    resetToDefaultDevice, // Function to reset to default device\n    refreshDevices,      // Function to refresh the device list\n  } = useAudioDevices();\n\n  // Example: Select the first device\n  const handleSelectFirstDevice = () => {\n    if (devices.length > 0) {\n      selectDevice(devices[0].id);\n    }\n  };\n\n  return (\n    <View>\n      {loading ? (\n        <Text>Loading devices...</Text>\n      ) : (\n        <View>\n          <Text>Available devices: {devices.length}</Text>\n          <Text>Current device: {currentDevice?.name || 'None'}</Text>\n          \n          {devices.map(device => (\n            <TouchableOpacity\n              key={device.id}\n              onPress={() => selectDevice(device.id)}\n            >\n              <Text>{device.name} ({device.type})</Text>\n            </TouchableOpacity>\n          ))}\n          \n          <Button title=\"Refresh Devices\" onPress={refreshDevices} />\n          <Button title=\"Reset to Default\" onPress={resetToDefaultDevice} />\n        </View>\n      )}\n    </View>\n  );\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"audiodeviceselector-component",children:"AudioDeviceSelector Component"}),"\n",(0,s.jsxs)(i.p,{children:["For a ready-to-use UI component, you can use the ",(0,s.jsx)(i.code,{children:"AudioDeviceSelector"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"import { AudioDeviceSelector } from '@siteed/expo-audio-studio';\n\nfunction MyRecordingScreen() {\n  const [selectedDeviceId, setSelectedDeviceId] = useState<string | undefined>();\n  \n  const handleDeviceSelected = (device) => {\n    console.log('Selected device:', device.name);\n    setSelectedDeviceId(device.id);\n  };\n  \n  return (\n    <View>\n      <Text>Select Recording Device:</Text>\n      <AudioDeviceSelector\n        value={selectedDeviceId}\n        onDeviceSelected={handleDeviceSelected}\n        showCapabilities={true}\n        showRefreshButton={true}\n      />\n    </View>\n  );\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"using-with-recording",children:"Using with Recording"}),"\n",(0,s.jsxs)(i.p,{children:["To use a specific audio device with recording, include the ",(0,s.jsx)(i.code,{children:"deviceId"})," in your recording configuration:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"import { useAudioRecorder, useAudioDevices } from '@siteed/expo-audio-studio';\n\nfunction RecordingComponent() {\n  const { devices, currentDevice } = useAudioDevices();\n  const { startRecording, stopRecording } = useAudioRecorder();\n  \n  const startRecordingWithDevice = async () => {\n    if (currentDevice) {\n      await startRecording({\n        sampleRate: 44100,\n        channels: 1,\n        encoding: 'pcm_16bit',\n        // Use the selected device for recording\n        deviceId: currentDevice.id,\n        // Handle device disconnection\n        deviceDisconnectionBehavior: 'fallback',\n      });\n    }\n  };\n  \n  return (\n    <View>\n      <AudioDeviceSelector showCapabilities={true} />\n      \n      <Button title=\"Start Recording\" onPress={startRecordingWithDevice} />\n      <Button title=\"Stop Recording\" onPress={stopRecording} />\n    </View>\n  );\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"low-level-api",children:"Low-Level API"}),"\n",(0,s.jsxs)(i.p,{children:["For advanced use cases, you can directly access the ",(0,s.jsx)(i.code,{children:"AudioDeviceManager"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"import { audioDeviceManager } from '@siteed/expo-audio-studio';\n\n// Get all available devices\nconst devices = await audioDeviceManager.getAvailableDevices();\n\n// Get all available devices with forced refresh (useful when Bluetooth devices aren't showing up)\n// NOTE: For most cases, use refreshDevices() instead as it includes debouncing and listener notifications\nconst refreshedDevices = await audioDeviceManager.getAvailableDevices({ refresh: true });\n\n// Get the current device\nconst currentDevice = await audioDeviceManager.getCurrentDevice();\n\n// Select a specific device\nconst success = await audioDeviceManager.selectDevice('device-id-here');\n\n// Reset to the default device\nawait audioDeviceManager.resetToDefaultDevice();\n\n// PREFERRED METHOD: Force refresh of device detection with debouncing and listener notifications\nconst updatedDevices = await audioDeviceManager.refreshDevices();\n\n// Listen for device changes\nconst removeListener = audioDeviceManager.addDeviceChangeListener((devices) => {\n  console.log('Devices changed:', devices);\n});\n\n// Remove the listener when done\nremoveListener();\n"})}),"\n",(0,s.jsx)(i.h2,{id:"platform-considerations",children:"Platform Considerations"}),"\n",(0,s.jsx)(i.h3,{id:"ios",children:"iOS"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Full support for device enumeration and selection"}),"\n",(0,s.jsx)(i.li,{children:"Detailed device capabilities"}),"\n",(0,s.jsx)(i.li,{children:"Automatic handling of device disconnection"}),"\n",(0,s.jsxs)(i.li,{children:["Special handling for Bluetooth devices may require using the ",(0,s.jsx)(i.code,{children:"refresh"})," option when devices aren't showing up"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"android",children:"Android"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Basic support for default device (full implementation coming soon)"}),"\n",(0,s.jsx)(i.li,{children:"Device selection will be fully supported in a future update"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"web",children:"Web"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Uses the MediaDevices API for device enumeration"}),"\n",(0,s.jsxs)(i.li,{children:["Support varies by browser:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Chrome & Firefox: Full support for device enumeration and selection"}),"\n",(0,s.jsx)(i.li,{children:"Safari: Limited device information due to privacy restrictions"}),"\n",(0,s.jsx)(i.li,{children:"All browsers: Requires user permission to access microphone"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Provides fallbacks for privacy-restricted environments"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Always check for device availability"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"if (devices.length === 0) {\n  // Show message about no available devices\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Handle loading and error states"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"if (loading) {\n  return <LoadingIndicator />;\n}\n\nif (error) {\n  return <Text>Error: {error.message}</Text>;\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Use deviceDisconnectionBehavior for robustness"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"await startRecording({\n  // ... other options\n  deviceDisconnectionBehavior: 'fallback', // Switch to default device if selected device disconnects\n});\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Force refresh if Bluetooth devices aren't detected"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'// If Bluetooth device isn\'t showing up, use the preferred refreshDevices method\nconst refreshDevices = async () => {\n  // This method includes debouncing and notifies all listeners\n  const devices = await audioDeviceManager.refreshDevices();\n  setDevices(devices);\n};\n\n// Add a refresh button in your UI\n<Button title="Refresh Devices" onPress={refreshDevices} />\n\n// Only use the direct approach if you need more control:\n// const devices = await audioDeviceManager.getAvailableDevices({ refresh: true });\n'})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Refresh devices periodically"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{})}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var c=n(6540);const s={},t=c.createContext(s);function o(e){const i=c.useContext(t);return c.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),c.createElement(t.Provider,{value:i},e.children)}}}]);