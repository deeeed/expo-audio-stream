"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[9924],{6556:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(4848),r=t(8453);const s={id:"standalone-recording",title:"Standalone Recording",sidebar_label:"Standalone Recording"},a="Standalone Recording",i={id:"usage/standalone-recording",title:"Standalone Recording",description:"This library provides hooks for recording audio. Here, we demonstrate how to use useAudioRecorder for standalone recording.",source:"@site/docs/usage/standalone-recording.md",sourceDirName:"usage",slug:"/usage/standalone-recording",permalink:"/expo-audio-stream/docs/usage/standalone-recording",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"standalone-recording",title:"Standalone Recording",sidebar_label:"Standalone Recording"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/expo-audio-stream/docs/installation"},next:{title:"Shared Recording",permalink:"/expo-audio-stream/docs/usage/shared-recording"}},d={},c=[{value:"Standalone Usage",id:"standalone-usage",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"standalone-recording",children:"Standalone Recording"}),"\n",(0,o.jsxs)(e.p,{children:["This library provides hooks for recording audio. Here, we demonstrate how to use ",(0,o.jsx)(e.code,{children:"useAudioRecorder"})," for standalone recording."]}),"\n",(0,o.jsx)(e.h2,{id:"standalone-usage",children:"Standalone Usage"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import {\n    AudioRecording,\n    useAudioRecorder,\n} from '@siteed/expo-audio-stream'\nimport { Audio } from 'expo-av' // Import for playing audio on native\nimport { useState } from 'react'\nimport { Button, StyleSheet, Text, View } from 'react-native'\n\nconst STOP_BUTTON_COLOR = 'red'\n\nconst styles = StyleSheet.create({\n    container: {\n        gap: 10,\n        margin: 40,\n        padding: 20,\n    },\n    stopButton: {\n        backgroundColor: 'red',\n    },\n})\n\nexport default function App() {\n    const {\n        startRecording,\n        stopRecording,\n        pauseRecording,\n        resumeRecording,\n        durationMs,\n        size,\n        isRecording,\n        isPaused,\n    } = useAudioRecorder({\n        debug: true,\n    })\n    const [audioResult, setAudioResult] = useState<AudioRecording>(\n        null\n    )\n    const [, setSound] = useState<Audio.Sound | null>(null) // State for audio playback on native\n\n    const handleStart = async () => {\n        const startResult = await startRecording({\n            interval: 500,\n            enableProcessing: true,\n            onAudioStream: async (_) => {\n                console.log(`onAudioStream`, _)\n            },\n        })\n        return startResult\n    }\n\n    const handleStop = async () => {\n        const result = await stopRecording()\n        console.log(`handleStop`, result)\n        setAudioResult(result)\n    }\n\n    const renderRecording = () => (\n        <View style={styles.container}>\n            <Text>Duration: {durationMs / 1000} seconds</Text>\n            <Text>Size: {size} bytes</Text>\n            <Button title=\"Pause Recording\" onPress={pauseRecording} />\n            <Button\n                title=\"Stop Recording\"\n                onPress={handleStop}\n                color={STOP_BUTTON_COLOR}\n            />\n        </View>\n    )\n\n    const renderPaused = () => (\n        <View style={styles.container}>\n            <Text>Duration: {durationMs / 1000} seconds</Text>\n            <Text>Size: {size} bytes</Text>\n            <Button title=\"Resume Recording\" onPress={resumeRecording} />\n            <Button\n                title=\"Stop Recording\"\n                color={STOP_BUTTON_COLOR}\n                onPress={handleStop}\n            />\n        </View>\n    )\n\n    const renderStopped = () => (\n        <View style={styles.container}>\n            <Button title=\"Start Recording\" onPress={handleStart} />\n            {audioResult && (\n                <View>\n                    <Button title=\"Play Recording\" onPress={handlePlay} />\n                </View>\n            )}\n        </View>\n    )\n\n    const handlePlay = async () => {\n        if (audioResult) {\n            const { sound } = await Audio.Sound.createAsync({\n                uri: audioResult.fileUri,\n            })\n            setSound(sound)\n            await sound.playAsync()\n        }\n    }\n\n    return (\n        <>\n            {isRecording\n                ? renderRecording()\n                : isPaused\n                  ? renderPaused()\n                  : renderStopped()}\n        </>\n    )\n}\n"})})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);