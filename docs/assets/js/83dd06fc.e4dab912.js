"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[6003],{8438:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"usage/shared-recording","title":"Shared Recording","description":"To facilitate state sharing across multiple components or screens, useSharedAudioRecorder can be used. It should be wrapped in an AudioRecorderProvider context provider to ensure state is managed at a higher level and shared appropriately.","source":"@site/docs/usage/shared-recording.md","sourceDirName":"usage","slug":"/usage/shared-recording","permalink":"/expo-audio-stream/docs/usage/shared-recording","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"shared-recording","title":"Shared Recording","sidebar_label":"Shared Recording"},"sidebar":"tutorialSidebar","previous":{"title":"Standalone Recording","permalink":"/expo-audio-stream/docs/usage/standalone-recording"},"next":{"title":"useAudioRecorder","permalink":"/expo-audio-stream/docs/hooks/use-audio-recorder"}}');var d=r(4848),t=r(8453);const s={id:"shared-recording",title:"Shared Recording",sidebar_label:"Shared Recording"},i="Shared Recording",c={},a=[{value:"Shared Recording Usage",id:"shared-recording-usage",level:2},{value:"Props",id:"props",level:4},{value:"useSharedAudioRecorder Hook",id:"usesharedaudiorecorder-hook",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"shared-recording",children:"Shared Recording"})}),"\n",(0,d.jsxs)(n.p,{children:["To facilitate state sharing across multiple components or screens, ",(0,d.jsx)(n.code,{children:"useSharedAudioRecorder"})," can be used. It should be wrapped in an ",(0,d.jsx)(n.code,{children:"AudioRecorderProvider"})," context provider to ensure state is managed at a higher level and shared appropriately."]}),"\n",(0,d.jsx)(n.h2,{id:"shared-recording-usage",children:"Shared Recording Usage"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"AudioRecorderProvider"})," component creates a context that allows multiple components to access and control the same recording session. This is useful for applications where recording controls need to be distributed across different components or screens."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",children:'import {\n    AudioRecorderProvider,\n    useSharedAudioRecorder,\n    RecordingConfig\n} from \'@siteed/expo-audio-stream\'\nimport { View, Text, Button } from \'react-native\'\n\nexport default function ParentComponent() {\n    // You can pass configuration options to the provider\n    return (\n        <AudioRecorderProvider config={{\n            // Optional configuration for the useAudioRecorder hook\n            logger: console\n        }}>\n            <RecordingControls />\n            <RecordingStatus />\n        </AudioRecorderProvider>\n    )\n}\n\nfunction RecordingControls() {\n    const { \n        startRecording, \n        stopRecording,\n        pauseRecording,\n        resumeRecording,\n        isRecording,\n        isPaused\n    } = useSharedAudioRecorder()\n\n    const handleStartRecording = async () => {\n        const config: RecordingConfig = {\n            interval: 500,\n            enableProcessing: true,\n            // See standalone-recording.md for full configuration options\n        }\n        \n        await startRecording(config)\n    }\n\n    return (\n        <View>\n            {!isRecording && !isPaused && (\n                <Button \n                    title="Start Recording" \n                    onPress={handleStartRecording} \n                />\n            )}\n            \n            {isRecording && (\n                <>\n                    <Button \n                        title="Pause Recording" \n                        onPress={pauseRecording} \n                    />\n                    <Button \n                        title="Stop Recording" \n                        onPress={stopRecording} \n                    />\n                </>\n            )}\n            \n            {isPaused && (\n                <>\n                    <Button \n                        title="Resume Recording" \n                        onPress={resumeRecording} \n                    />\n                    <Button \n                        title="Stop Recording" \n                        onPress={stopRecording} \n                    />\n                </>\n            )}\n        </View>\n    )\n}\n\nfunction RecordingStatus() {\n    const { isRecording, isPaused, durationMs, size } = useSharedAudioRecorder()\n    \n    if (!isRecording && !isPaused) {\n        return <Text>Ready to record</Text>\n    }\n    \n    return (\n        <View>\n            <Text>Status: {isRecording ? \'Recording\' : \'Paused\'}</Text>\n            <Text>Duration: {durationMs / 1000} seconds</Text>\n            <Text>Size: {size} bytes</Text>\n        </View>\n    )\n}\n\n## API Reference\n\n### AudioRecorderProvider\n\n```tsx\n<AudioRecorderProvider config={options}>\n  {children}\n</AudioRecorderProvider>\n'})}),"\n",(0,d.jsx)(n.h4,{id:"props",children:"Props"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Property"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"children"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"React.ReactNode"})}),(0,d.jsx)(n.td,{children:"Child components that will have access to the shared recorder"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"config"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"UseAudioRecorderProps"})}),(0,d.jsx)(n.td,{children:"Optional configuration for the useAudioRecorder hook"})]})]})]}),"\n",(0,d.jsx)(n.h3,{id:"usesharedaudiorecorder-hook",children:"useSharedAudioRecorder Hook"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",children:"const recorder = useSharedAudioRecorder()\n"})}),"\n",(0,d.jsxs)(n.p,{children:["This hook returns the same interface as ",(0,d.jsx)(n.code,{children:"useAudioRecorder"}),", but the state is shared across all components that use this hook within the same ",(0,d.jsx)(n.code,{children:"AudioRecorderProvider"}),"."]}),"\n",(0,d.jsxs)(n.p,{children:["See the ",(0,d.jsx)(n.a,{href:"/expo-audio-stream/docs/usage/standalone-recording#api-reference",children:"Standalone Recording"})," documentation for the complete API reference."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var o=r(6540);const d={},t=o.createContext(d);function s(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);