"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[8672],{4910:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"features","title":"Features","description":"@siteed/expo-audio-studio provides a comprehensive set of audio recording, processing, and analysis features that work consistently across iOS, Android, and web platforms:","source":"@site/docs/features.md","sourceDirName":".","slug":"/features","permalink":"/expo-audio-stream/docs/features","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"features","title":"Features","sidebar_label":"Features"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/expo-audio-stream/docs/"},"next":{"title":"Installation","permalink":"/expo-audio-stream/docs/installation"}}');var r=n(4848),t=n(8453);const o={id:"features",title:"Features",sidebar_label:"Features"},a="Key Features",c={},d=[{value:"Recording Features",id:"recording-features",level:2},{value:"Device Management",id:"device-management",level:2},{value:"Audio Processing",id:"audio-processing",level:2},{value:"Platform Integration",id:"platform-integration",level:2},{value:"User Interface",id:"user-interface",level:2}];function l(e){const i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"key-features",children:"Key Features"})}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"@siteed/expo-audio-studio"})," provides a comprehensive set of audio recording, processing, and analysis features that work consistently across iOS, Android, and web platforms:"]}),"\n",(0,r.jsx)(i.h2,{id:"recording-features",children:"Recording Features"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Real-time audio streaming"})," with configurable quality settings across all platforms"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Zero-latency recording"})," with ",(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/api-reference/recording-config#zero-latency-recording",children:"prepareRecording"})," API to eliminate startup delay"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Dual-stream recording"})," with simultaneous raw PCM and ",(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/api-reference/recording-config#compression-settings",children:"compressed formats"})," (OPUS/AAC)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Audio device detection and selection"})," for choosing specific microphones or input sources"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Intelligent interruption handling"})," with automatic pause/resume during phone calls"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Background recording"})," support with keep-awake functionality"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Rich notification system"})," with live waveform visualization (Android) and media controls"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"device-management",children:"Device Management"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Device enumeration"})," to list all available audio input devices"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Detailed device capabilities"})," showing supported sample rates, channels, and bit depths"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Device selection API"})," for choosing specific microphones or audio inputs"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Device type detection"})," to identify Bluetooth, USB, wired, and built-in microphones"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Automatic fallback behavior"})," when devices become unavailable"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cross-platform compatibility"})," with consistent API across iOS, Android, and web"]}),"\n"]}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Note:"})," Device detection features require Bluetooth and USB permissions on Android. You can disable this functionality by setting ",(0,r.jsx)(i.code,{children:"enableDeviceDetection: false"})," in the ",(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/installation#configuration-options",children:"plugin configuration"})," to reduce app permissions."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"audio-processing",children:"Audio Processing"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsxs)(i.strong,{children:["Comprehensive ",(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/api-reference/audio-features/audio-analysis-overview",children:"audio analysis"})]})," with feature extraction (energy, RMS, MFCC, etc.)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Advanced features extraction"})," (spectral features, chromagram, pitch detection, etc.) is available but experimental, especially during live recording due to high processing requirements"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/api-reference/audio-processing/extract-mel-spectrogram",children:"Mel spectrogram generation"})})," for machine learning and visualization"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsxs)(i.strong,{children:["Precision ",(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/api-reference/audio-processing/trim-audio",children:"audio trimming"})]})," with multi-segment support"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Format conversion"})," and normalization capabilities"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"platform-integration",children:"Platform Integration"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Automated permissions"})," setup in managed Expo projects"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Consistent WAV PCM"})," format across platforms"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Native optimizations"})," for each platform's audio architecture:","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Web: AudioWorkletProcessor for real-time processing"}),"\n",(0,r.jsx)(i.li,{children:"Android: Native AudioRecord API"}),"\n",(0,r.jsx)(i.li,{children:"iOS: AVAudioEngine with automatic sample rate adaptation"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"user-interface",children:"User Interface"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Ready-to-use UI components via ",(0,r.jsx)(i.a,{href:"https://github.com/deeeed/expo-audio-stream/tree/main/packages/expo-audio-ui",children:"@siteed/expo-audio-ui"})," package"]}),"\n",(0,r.jsx)(i.li,{children:"Audio device selection components"}),"\n",(0,r.jsx)(i.li,{children:"Visualizations, waveforms, and interactive audio controls"}),"\n",(0,r.jsx)(i.li,{children:"Full-featured AudioPlayground application showcasing API usage"}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["For detailed API documentation and usage examples, explore the ",(0,r.jsx)(i.a,{href:"/expo-audio-stream/docs/api-reference/api-intro",children:"API Reference"})," section."]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>a});var s=n(6540);const r={},t=s.createContext(r);function o(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);