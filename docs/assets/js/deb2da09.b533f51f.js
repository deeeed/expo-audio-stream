"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[2742],{1118:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-reference/recording-config","title":"Recording Configuration","description":"The recording configuration specifies the settings used for audio recording on different platforms. Below are the default settings for Android, iOS, and web platforms:","source":"@site/docs/api-reference/recording-config.md","sourceDirName":"api-reference","slug":"/api-reference/recording-config","permalink":"/expo-audio-stream/docs/api-reference/recording-config","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"recording-config","title":"Recording Configuration","sidebar_label":"Recording Configuration"},"sidebar":"tutorialSidebar","previous":{"title":"API Intro","permalink":"/expo-audio-stream/docs/api-reference/api-intro"},"next":{"title":"AudioRecording","permalink":"/expo-audio-stream/docs/api-reference/audio-recording"}}');var o=i(4848),s=i(8453);const t={id:"recording-config",title:"Recording Configuration",sidebar_label:"Recording Configuration"},a=void 0,d={},l=[{value:"Platform-Specific Architecture",id:"platform-specific-architecture",level:2},{value:"Web",id:"web",level:3},{value:"Android",id:"android",level:3},{value:"iOS",id:"ios",level:3},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Android and iOS",id:"android-and-ios",level:3},{value:"Web",id:"web-1",level:3},{value:"Recording Process",id:"recording-process",level:2},{value:"Zero-Latency Recording",id:"zero-latency-recording",level:2},{value:"How it Works",id:"how-it-works",level:3},{value:"Using prepareRecording",id:"using-preparerecording",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Implementation Notes",id:"implementation-notes",level:3},{value:"Example: Capture Time-Critical Audio",id:"example-capture-time-critical-audio",level:3},{value:"Compression Settings",id:"compression-settings",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Supported Formats",id:"supported-formats",level:3},{value:"Example: Enabling Compression",id:"example-enabling-compression",level:3},{value:"Accessing Compressed Files",id:"accessing-compressed-files",level:3},{value:"Platform Considerations",id:"platform-considerations",level:3},{value:"Streaming Compressed Audio",id:"streaming-compressed-audio",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"Recording Interruption Handling",id:"recording-interruption-handling",level:2},{value:"Interruption Types",id:"interruption-types",level:3},{value:"Handling Interruptions",id:"handling-interruptions",level:3},{value:"Platform Behavior",id:"platform-behavior",level:3}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"The recording configuration specifies the settings used for audio recording on different platforms. Below are the default settings for Android, iOS, and web platforms:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"On Android: 16kHz sample rate, 16-bit depth, 1 channel."}),"\n",(0,o.jsx)(n.li,{children:"On IOS: 48kHz sample rate, 16-bit depth, 1 channel."}),"\n",(0,o.jsx)(n.li,{children:"On the web, default configuration is 44.1kHz sample rate, 32-bit depth, 1 channel."}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note on iOS Recording"}),": The library now automatically detects and adapts to the hardware's actual sample rate on both iOS devices and simulators. This means you can specify any supported sample rate (e.g., 16kHz, 44.1kHz, 48kHz) in your configuration, and the library will:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Capture audio at the hardware's native sample rate (typically 44.1kHz on simulators)"}),"\n",(0,o.jsx)(n.li,{children:"Perform high-quality resampling to match your requested sample rate"}),"\n",(0,o.jsx)(n.li,{children:"Deliver the final recording at your specified configuration"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This automatic adaptation prevents crashes that previously occurred when the requested sample rate didn't match the hardware capabilities, especially in simulators."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"export interface RecordingConfig {\n    sampleRate?: SampleRate // Sample rate for recording (16000, 44100, or 48000 Hz)\n    channels?: 1 | 2 // Number of audio channels (1 for mono, 2 for stereo)\n    encoding?: EncodingType // Encoding type for the recording (pcm_32bit, pcm_16bit, pcm_8bit)\n    interval?: number // Interval in milliseconds at which to emit recording data\n\n    // Device and notification settings\n    keepAwake?: boolean // Continue recording when app is in background (default is true)\n    showNotification?: boolean // Show a notification during recording (default is false)\n    showWaveformInNotification?: boolean // Show waveform in the notification (Android only)\n    notification?: NotificationConfig // Configuration for the notification\n\n    // Audio processing settings\n    enableProcessing?: boolean // Enable audio processing (default is false)\n    pointsPerSecond?: number // Number of data points to extract per second of audio (default is 10)\n    algorithm?: AmplitudeAlgorithm // Algorithm to use for amplitude computation (default is \"rms\")\n    features?: AudioFeaturesOptions // Feature options to extract (default is empty)\n\n    // Platform specific configuration\n    ios?: IOSConfig // iOS-specific configuration\n\n    // Compression settings\n    compression?: {\n        enabled: boolean\n        format: 'aac' | 'opus'  // Available compression formats\n        bitrate?: number\n    }\n\n    // Output configuration\n    outputDirectory?: string // Custom directory for saving recordings (uses app default if not specified)\n    filename?: string // Custom filename for the recording (uses UUID if not specified)\n\n    // Interruption handling\n    autoResumeAfterInterruption?: boolean // Whether to automatically resume after interruption\n    onRecordingInterrupted?: (_: RecordingInterruptionEvent) => void // Callback for interruption events\n\n    // Callback functions\n    onAudioStream?: (_: AudioDataEvent) => Promise<void> // Callback function to handle audio stream\n    onAudioAnalysis?: (_: AudioAnalysisEvent) => Promise<void> // Callback function to handle audio features\n}\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"platform-specific-architecture",children:"Platform-Specific Architecture"}),"\n",(0,o.jsx)(n.h3,{id:"web",children:"Web"}),"\n",(0,o.jsxs)(n.p,{children:["On the web, the recording utilizes the ",(0,o.jsx)(n.code,{children:"AudioWorkletProcessor"})," for handling audio data. The ",(0,o.jsx)(n.code,{children:"AudioWorkletProcessor"})," allows for real-time audio processing directly in the browser, making it a powerful tool for web-based audio applications."]}),"\n",(0,o.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,o.jsxs)(n.p,{children:["On Android, the recording is managed using Android's native ",(0,o.jsx)(n.code,{children:"AudioRecord"})," API along with ",(0,o.jsx)(n.code,{children:"AudioFormat"})," and ",(0,o.jsx)(n.code,{children:"MediaRecorder"}),". These classes are part of the Android framework and provide low-level access to audio hardware, allowing for high-quality audio recording."]}),"\n",(0,o.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,o.jsxs)(n.p,{children:["On iOS, the recording is managed using ",(0,o.jsx)(n.code,{children:"AVAudioEngine"})," and related classes from the ",(0,o.jsx)(n.code,{children:"AVFoundation"})," framework. The implementation uses a sophisticated audio handling approach that:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Automatically detects and adapts to the hardware's native sample rate"}),"\n",(0,o.jsx)(n.li,{children:"Handles sample rate mismatches between iOS audio session and actual hardware capabilities"}),"\n",(0,o.jsx)(n.li,{children:"Performs high-quality resampling to match the requested configuration"}),"\n",(0,o.jsx)(n.li,{children:"Works reliably on both physical devices and simulators regardless of the requested sample rate"}),"\n",(0,o.jsx)(n.li,{children:"Supports both 16-bit and 32-bit PCM formats"}),"\n",(0,o.jsx)(n.li,{children:"Maintains audio quality through intermediate Float32 format when necessary"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,o.jsx)(n.h3,{id:"android-and-ios",children:"Android and iOS"}),"\n",(0,o.jsx)(n.p,{children:"On Android and iOS, the library attempts to record audio in the specified format. On iOS, the audio is automatically resampled to match the requested configuration using AVAudioConverter, ensuring high-quality output even when the hardware sample rate differs from the target rate."}),"\n",(0,o.jsx)(n.h3,{id:"web-1",children:"Web"}),"\n",(0,o.jsx)(n.p,{children:"On the web, the default configuration is typically higher, with a 44.1kHz sample rate and 32-bit depth. This ensures better sound quality, but it can lead to issues when resampling is required to lower settings."}),"\n",(0,o.jsx)(n.h2,{id:"recording-process",children:"Recording Process"}),"\n",(0,o.jsxs)(n.p,{children:["To start recording, you use the ",(0,o.jsx)(n.code,{children:"startRecording"})," function which accepts a ",(0,o.jsx)(n.code,{children:"RecordingConfig"})," object. The output of this function is a ",(0,o.jsx)(n.code,{children:"StartRecordingResult"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"export interface StartRecordingResult {\n    fileUri: string\n    mimeType: string\n    channels?: number\n    bitDepth?: BitDepth\n    sampleRate?: SampleRate\n    compression?: {\n        compressedFileUri: string\n        size: number\n        mimeType: string\n        bitrate: number\n        format: string\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"zero-latency-recording",children:"Zero-Latency Recording"}),"\n",(0,o.jsxs)(n.p,{children:["The library provides a ",(0,o.jsx)(n.code,{children:"prepareRecording"})," method that can significantly reduce the latency between a user action and the actual start of recording. This is particularly useful for time-sensitive applications where any delay in starting audio capture could be problematic."]}),"\n",(0,o.jsx)(n.h3,{id:"how-it-works",children:"How it Works"}),"\n",(0,o.jsxs)(n.p,{children:["When using the standard ",(0,o.jsx)(n.code,{children:"startRecording"})," function, there's an inherent delay caused by several initialization steps:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Requesting user permissions (if not already granted)"}),"\n",(0,o.jsx)(n.li,{children:"Setting up audio sessions"}),"\n",(0,o.jsx)(n.li,{children:"Allocating memory for audio buffers"}),"\n",(0,o.jsx)(n.li,{children:"Initializing hardware resources"}),"\n",(0,o.jsx)(n.li,{children:"Configuring encoders and audio processing pipelines"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"prepareRecording"})," method decouples these initialization steps from the actual recording start, allowing your application to pre-initialize all necessary resources in advance."]}),"\n",(0,o.jsx)(n.h3,{id:"using-preparerecording",children:"Using prepareRecording"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useAudioRecorder, useSharedAudioRecorder } from '@siteed/expo-audio-studio';\n\n// With individual recorder hook\nconst { \n  prepareRecording, \n  startRecording, \n  stopRecording \n} = useAudioRecorder();\n\n// Or with shared recorder context\nconst { \n  prepareRecording, \n  startRecording, \n  stopRecording \n} = useSharedAudioRecorder();\n\n// Prepare recording during component mounting or any appropriate initialization phase\nuseEffect(() => {\n  const prepare = async () => {\n    await prepareRecording({\n      sampleRate: 44100,\n      channels: 1,\n      encoding: 'pcm_16bit',\n      // Add any other recording configuration options\n    });\n    console.log('Recording resources prepared and ready');\n  };\n  \n  prepare();\n}, []);\n\n// Later, when the user triggers recording, it starts with minimal latency\nconst handleRecordButton = async () => {\n  await startRecording({\n    // Use the same configuration as in prepareRecording\n    sampleRate: 44100,\n    channels: 1,\n    encoding: 'pcm_16bit',\n  });\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Eliminates perceptible lag"})," between user action and recording start"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Improves user experience"})," for time-sensitive applications"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistent behavior"})," across all supported platforms"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Maintains audio quality"})," while reducing startup latency"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Call ",(0,o.jsx)(n.code,{children:"prepareRecording"})," as early as possible, such as during screen loading"]}),"\n",(0,o.jsxs)(n.li,{children:["Use identical configuration for both ",(0,o.jsx)(n.code,{children:"prepareRecording"})," and ",(0,o.jsx)(n.code,{children:"startRecording"})]}),"\n",(0,o.jsx)(n.li,{children:"The preparation state persists until recording starts or the app is terminated"}),"\n",(0,o.jsxs)(n.li,{children:["If ",(0,o.jsx)(n.code,{children:"startRecording"})," is called without prior preparation, it performs normal initialization"]}),"\n",(0,o.jsx)(n.li,{children:"Resources are automatically released when recording starts or when the component is unmounted"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example-capture-time-critical-audio",children:"Example: Capture Time-Critical Audio"}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates how to implement a voice command system where capturing the beginning of speech is critical:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function VoiceCommandScreen() {\n  const { \n    prepareRecording, \n    startRecording, \n    stopRecording,\n    isRecording \n  } = useSharedAudioRecorder();\n  \n  // Prepare audio resources when screen loads\n  useEffect(() => {\n    const prepareAudio = async () => {\n      await prepareRecording({\n        sampleRate: 16000, // Optimized for speech\n        channels: 1,\n        encoding: 'pcm_16bit',\n        enableProcessing: true,\n        features: {\n          energy: true,\n          rms: true,\n        }\n      });\n    };\n    \n    prepareAudio();\n    \n    return () => {\n      // Clean up if needed\n      if (isRecording) {\n        stopRecording();\n      }\n    };\n  }, []);\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.instructions}>\n        Press and hold to capture voice command\n      </Text>\n      \n      <Pressable\n        onPressIn={() => startRecording({\n          sampleRate: 16000,\n          channels: 1,\n          encoding: 'pcm_16bit',\n          enableProcessing: true,\n          features: {\n            energy: true,\n            rms: true,\n          }\n        })}\n        onPressOut={stopRecording}\n        style={({ pressed }) => [\n          styles.recordButton,\n          { backgroundColor: pressed || isRecording ? 'red' : 'blue' }\n        ]}\n      >\n        <Text style={styles.buttonText}>\n          {isRecording ? 'Recording...' : 'Press to Record'}\n        </Text>\n      </Pressable>\n    </View>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"compression-settings",children:"Compression Settings"}),"\n",(0,o.jsx)(n.p,{children:"The library supports real-time audio compression alongside the raw PCM recording. This dual-stream approach allows you to capture both high-quality uncompressed audio and smaller compressed files simultaneously."}),"\n",(0,o.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"compression: {\n    enabled: boolean      // Whether to enable compression\n    format: 'aac' | 'opus' // Compression format to use\n    bitrate?: number      // Optional bitrate in bits per second\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"supported-formats",children:"Supported Formats"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"AAC (Advanced Audio Coding)"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"High-quality lossy compression"}),"\n",(0,o.jsx)(n.li,{children:"Excellent for voice and music"}),"\n",(0,o.jsx)(n.li,{children:"Widely supported on all platforms"}),"\n",(0,o.jsx)(n.li,{children:"Recommended bitrate: 64000-256000 bps"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Opus"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Modern, high-efficiency codec"}),"\n",(0,o.jsx)(n.li,{children:"Superior quality at low bitrates"}),"\n",(0,o.jsx)(n.li,{children:"Excellent for speech compression"}),"\n",(0,o.jsx)(n.li,{children:"Recommended bitrate: 16000-96000 bps"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example-enabling-compression",children:"Example: Enabling Compression"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const { startRecording } = useAudioRecorder();\n\n// Configure recording with compression\nawait startRecording({\n  sampleRate: 44100,\n  channels: 1,\n  encoding: 'pcm_16bit',\n  // Compression settings\n  compression: {\n    enabled: true,\n    format: 'aac',\n    bitrate: 128000 // 128 kbps\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"accessing-compressed-files",children:"Accessing Compressed Files"}),"\n",(0,o.jsx)(n.p,{children:"When recording with compression enabled, both the raw PCM file and the compressed file are available in the recording result:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const { stopRecording } = useAudioRecorder();\n\nconst handleStopRecording = async () => {\n  const result = await stopRecording();\n  \n  // Access the uncompressed WAV file\n  console.log('Uncompressed file:', result.fileUri);\n  console.log('Uncompressed size:', result.size, 'bytes');\n  \n  // Access the compressed file\n  if (result.compression) {\n    console.log('Compressed file:', result.compression.compressedFileUri);\n    console.log('Compressed size:', result.compression.size, 'bytes');\n    console.log('Compression format:', result.compression.format);\n    console.log('Bitrate:', result.compression.bitrate, 'bps');\n  }\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"platform-considerations",children:"Platform Considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"iOS"}),": Both AAC and Opus are supported"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Android"}),": Both AAC and Opus are supported"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Web"}),": Opus is supported, AAC support depends on browser"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"streaming-compressed-audio",children:"Streaming Compressed Audio"}),"\n",(0,o.jsxs)(n.p,{children:["You can also access the compressed audio data in real-time during recording using the ",(0,o.jsx)(n.code,{children:"onAudioStream"})," callback:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"await startRecording({\n  // ... other config options\n  compression: {\n    enabled: true,\n    format: 'opus',\n    bitrate: 64000\n  },\n  onAudioStream: async (event) => {\n    // Raw PCM audio data\n    console.log('Raw data size:', event.eventDataSize);\n    \n    // Compressed audio chunk (if compression is enabled)\n    if (event.compression?.data) {\n      console.log('Compressed chunk size:', \n        typeof event.compression.data === 'string' \n          ? event.compression.data.length \n          : event.compression.data.size\n      );\n    }\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useAudioRecorder } from '@siteed/expo-audio-studio';\n\nconst config = {\n    sampleRate: 16000,\n    channels: 1,\n    encoding: 'pcm_16bit',\n    interval: 500,\n    enableProcessing: true,\n    keepAwake: true,\n    showNotification: true,\n    compression: {\n        enabled: true,\n        format: 'aac',\n        bitrate: 128000\n    },\n    pointsPerSecond: 1000,\n    algorithm: 'rms',\n    features: { energy: true, rms: true },\n    autoResumeAfterInterruption: true,\n    onAudioStream: async (event) => {\n        console.log('Audio data:', event);\n    },\n    onAudioAnalysis: async (data) => {\n        console.log('Processing:', data);\n    },\n    onRecordingInterrupted: (event) => {\n        console.log('Recording interrupted:', event);\n    }\n};\n\nconst {\n    startRecording,\n    stopRecording,\n    isRecording,\n    durationMs,\n    size,\n} = useAudioRecorder({ debug: true });\n\nconst handleStart = async () => {\n    const { granted } = await Audio.requestPermissionsAsync();\n    if (granted) {\n        const result = await startRecording(config);\n        console.log('Recording started with config:', result);\n    }\n};\n\nconst handleStop = async () => {\n    const result = await stopRecording();\n    console.log('Recording stopped with result:', result);\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"recording-interruption-handling",children:"Recording Interruption Handling"}),"\n",(0,o.jsx)(n.p,{children:"The library provides robust handling of recording interruptions that may occur during audio capture. These interruptions can happen for various reasons such as incoming phone calls or audio focus changes."}),"\n",(0,o.jsx)(n.h3,{id:"interruption-types",children:"Interruption Types"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"RecordingInterruptionEvent"})," includes the following possible reasons for interruption:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"type RecordingInterruptionReason =\n    | 'audioFocusLoss'    // Another app has taken audio focus\n    | 'audioFocusGain'    // Audio focus has been regained\n    | 'phoneCall'         // An incoming phone call has interrupted recording\n    | 'phoneCallEnded'    // The interrupting phone call has ended\n"})}),"\n",(0,o.jsx)(n.h3,{id:"handling-interruptions",children:"Handling Interruptions"}),"\n",(0,o.jsx)(n.p,{children:"You can handle interruptions in two ways:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Automatic Resume"}),": Set ",(0,o.jsx)(n.code,{children:"autoResumeAfterInterruption: true"})," in your config to automatically resume recording after an interruption ends."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Manual Handling"}),": Use the ",(0,o.jsx)(n.code,{children:"onRecordingInterrupted"})," callback to implement custom interruption handling:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const config = {\n    // ... other config options ...\n    autoResumeAfterInterruption: false,\n    onRecordingInterrupted: (event) => {\n        const { reason, isPaused } = event;\n        \n        switch (reason) {\n            case 'phoneCall':\n                console.log('Recording paused due to phone call');\n                break;\n            case 'phoneCallEnded':\n                console.log('Phone call ended, can resume recording');\n                break;\n            case 'audioFocusLoss':\n                console.log('Audio focus lost to another app');\n                break;\n            case 'audioFocusGain':\n                console.log('Audio focus regained');\n                break;\n        }\n        \n        console.log('Recording is currently paused:', isPaused);\n    }\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"platform-behavior",children:"Platform Behavior"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"iOS"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Interruptions are handled through the AVAudioSession system"}),"\n",(0,o.jsxs)(n.li,{children:["Phone call handling is enabled by default (can be disabled via ",(0,o.jsx)(n.code,{children:"enablePhoneStateHandling: false"}),")"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Android"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Interruptions are managed via AudioManager focus changes"}),"\n",(0,o.jsxs)(n.li,{children:["Phone call handling is enabled by default (can be disabled via ",(0,o.jsx)(n.code,{children:"enablePhoneStateHandling: false"}),")"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Web"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Interruptions are handled through the Web Audio API's state changes"}),"\n",(0,o.jsx)(n.li,{children:"Phone call handling is not supported"}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(6540);const o={},s=r.createContext(o);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);