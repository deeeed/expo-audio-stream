buildscript {
    ext.safeExtGet = { prop, fallback ->
        rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:7.2.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0")
    }
}

// For backwards compatibility with older React Native versions
def REACT_NATIVE_VERSION = safeExtGet('reactNativeVersion', '+')

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'

android {
    namespace "net.siteed.sherpaonnx"
    compileSdkVersion safeExtGet('compileSdkVersion', 33)
    buildToolsVersion safeExtGet('buildToolsVersion', '33.0.0')

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 21)
        targetSdkVersion safeExtGet('targetSdkVersion', 33)
        versionCode 1
        versionName "1.0"
        
        // Test instrumentation runner for integration tests
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    sourceSets {
        main {
            // Include prebuilt libraries in the correct location
            jniLibs.srcDirs = ['src/main/jniLibs']
            
            // Add Java source directory for compatibility
            java.srcDirs = ['src/main/java']
        }
    }

    // Configure Kotlin source directories
    kotlin {
        sourceSets {
            main {
                kotlin.srcDirs = ['src/main/kotlin']
            }
            if (isNewArchitectureEnabled()) {
                main.kotlin.srcDirs += ['src/newarch/kotlin']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // IMPORTANT: These Java compatibility settings must match the React Native app
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    // This ensures the library is compiled as an AAR with the JNI libraries included
    packagingOptions {
        pickFirst '**/*.so'
    }
    
    // Add local project sources for Sherpa ONNX Kotlin classes
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

// Add back the New Architecture detection
def isNewArchitectureEnabled() {
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

repositories {
    google()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Kotlin standard library must come first - this is critical
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-common:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.0"
    
    // React Native dependencies
    implementation "com.facebook.react:react-native:${REACT_NATIVE_VERSION}"
    
    // Android support libraries
    implementation "androidx.annotation:annotation:1.5.0"
    implementation "androidx.core:core-ktx:1.9.0"
    implementation "androidx.media:media:1.6.0"  // For AudioTrack and related classes

    // Apache Commons Compress for tar.bz2 extraction
    implementation "org.apache.commons:commons-compress:1.23.0"
    
    // Make sure we have the actual sherpa-onnx library dependencies
    // First check if there are prebuilt libraries in the jniLibs folder
    if (file("src/main/jniLibs").exists()) {
        println("Using prebuilt sherpa-onnx libraries from jniLibs directory")
    } else {
        println("WARNING: No prebuilt libraries found in jniLibs directory!")
    }

    // Test dependencies
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test:rules:1.5.0"

    // Add New Architecture dependencies conditionally
    if (isNewArchitectureEnabled()) {
        implementation "com.facebook.react:react-native:${REACT_NATIVE_VERSION}"
        // implementation "com.facebook.react:react-native-bridge:${REACT_NATIVE_VERSION}"
        // implementation "com.facebook.react:react-native-turbomodule-core:${REACT_NATIVE_VERSION}"
    }
} 