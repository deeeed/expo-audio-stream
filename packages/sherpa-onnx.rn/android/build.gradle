buildscript {
    ext.safeExtGet = { prop, fallback ->
        rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:7.2.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0")
    }
}

// For backwards compatibility with older React Native versions
def REACT_NATIVE_VERSION = safeExtGet('reactNativeVersion', '+')

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    namespace "net.siteed.sherpaonnx"
    compileSdkVersion safeExtGet('compileSdkVersion', 33)
    buildToolsVersion safeExtGet('buildToolsVersion', '33.0.0')

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 21)
        targetSdkVersion safeExtGet('targetSdkVersion', 33)
        versionCode 1
        versionName "1.0"
        
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    sourceSets {
        main {
            // Include prebuilt libraries in the correct location
            jniLibs.srcDirs = ['src/main/jniLibs']
            
            // Add Kotlin source directory
            kotlin.srcDirs = ['src/main/kotlin']
            
            // Add Java source directory for compatibility
            java.srcDirs = ['src/main/java']
        }
        
        // We'll add newArch source set back when we actually use it
        // newArch {
        //     kotlin.srcDirs = ['src/newarch/kotlin']
        // }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // IMPORTANT: These Java compatibility settings must match the React Native app
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    // This ensures the library is compiled as an AAR with the JNI libraries included
    packagingOptions {
        pickFirst '**/*.so'
    }
    
    // Add local project sources for Sherpa ONNX Kotlin classes
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

// Add back the New Architecture detection
def isNewArchitectureEnabled() {
    // Return false to disable New Architecture completely for now
    return false
    // When ready to re-enable:
    // return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

// Conditional New Architecture setup
if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
    react {
        jsRootDir = file("../src/")
        libraryName = "sherpa_onnx_rn"
        codegenJavaPackageName = "net.siteed.sherpaonnx"
    }
}

repositories {
    google()
    mavenCentral()
    mavenLocal()
}

dependencies {
    // React Native dependencies
    implementation "com.facebook.react:react-native:${REACT_NATIVE_VERSION}"
    
    // Kotlin standard library
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    
    // Android support libraries
    implementation "androidx.annotation:annotation:1.5.0"

    // Removed all TurboModule dependencies completely
    // We'll add them back when we're ready for New Architecture

    // Add New Architecture dependencies conditionally
    if (isNewArchitectureEnabled()) {
        // Use a specific version instead of '+'
        implementation "com.facebook.react:react-native-jni:0.72.6"
    }
} 