// packages/sherpa-onnx.rn/ios/codegen/SherpaOnnxSpec/SherpaOnnxSpec.h
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of SherpaOnnxSpec symbols
#ifndef SherpaOnnxSpec_H
#define SherpaOnnxSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeSherpaOnnxSpec {
    struct SpecCreateRecognizerConfig {
      NSString *modelPath() const;
      std::optional<double> sampleRate() const;
      std::optional<double> numThreads() const;
      std::optional<bool> debug() const;
      std::optional<double> featureDim() const;
      std::optional<double> beamSize() const;
      std::optional<double> beamThreshold() const;
      NSString *language() const;
      std::optional<bool> enableEndpoint() const;
      std::optional<bool> enableNonStreaming() const;

      SpecCreateRecognizerConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSherpaOnnxSpec_SpecCreateRecognizerConfig)
+ (RCTManagedPointer *)JS_NativeSherpaOnnxSpec_SpecCreateRecognizerConfig:(id)json;
@end
namespace JS {
  namespace NativeSherpaOnnxSpec {
    struct SpecInitTtsConfig {
      NSString *modelDir() const;
      NSString *modelType() const;
      NSString *modelName() const;
      NSString *acousticModelName() const;
      NSString *vocoder() const;
      NSString *voices() const;
      NSString *lexicon() const;
      NSString *dataDir() const;
      NSString *dictDir() const;
      NSString *ruleFsts() const;
      NSString *ruleFars() const;
      std::optional<double> numThreads() const;
      std::optional<bool> debug() const;
      std::optional<double> noiseScale() const;
      std::optional<double> noiseScaleW() const;
      std::optional<double> lengthScale() const;

      SpecInitTtsConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSherpaOnnxSpec_SpecInitTtsConfig)
+ (RCTManagedPointer *)JS_NativeSherpaOnnxSpec_SpecInitTtsConfig:(id)json;
@end
namespace JS {
  namespace NativeSherpaOnnxSpec {
    struct SpecGenerateTtsConfig {
      NSString *text() const;
      double speakerId() const;
      double speakingRate() const;
      bool playAudio() const;
      NSString *fileNamePrefix() const;
      std::optional<double> lengthScale() const;
      std::optional<double> noiseScale() const;
      std::optional<double> noiseScaleW() const;

      SpecGenerateTtsConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSherpaOnnxSpec_SpecGenerateTtsConfig)
+ (RCTManagedPointer *)JS_NativeSherpaOnnxSpec_SpecGenerateTtsConfig:(id)json;
@end
namespace JS {
  namespace NativeSherpaOnnxSpec {
    struct SpecInitAsrConfig {
      NSString *modelDir() const;
      NSString *modelType() const;
      NSString *modelPath() const;
      std::optional<double> numThreads() const;
      std::optional<bool> debug() const;

      SpecInitAsrConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSherpaOnnxSpec_SpecInitAsrConfig)
+ (RCTManagedPointer *)JS_NativeSherpaOnnxSpec_SpecInitAsrConfig:(id)json;
@end
namespace JS {
  namespace NativeSherpaOnnxSpec {
    struct SpecInitAudioTaggingConfig {
      NSString *modelDir() const;
      NSString *modelType() const;
      NSString *modelName() const;
      NSString *modelFile() const;
      NSString *labelsFile() const;
      std::optional<double> numThreads() const;
      std::optional<double> topK() const;
      std::optional<bool> debug() const;

      SpecInitAudioTaggingConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSherpaOnnxSpec_SpecInitAudioTaggingConfig)
+ (RCTManagedPointer *)JS_NativeSherpaOnnxSpec_SpecInitAudioTaggingConfig:(id)json;
@end
namespace JS {
  namespace NativeSherpaOnnxSpec {
    struct SpecInitSpeakerIdConfig {
      NSString *modelDir() const;
      NSString *modelFile() const;
      NSString *modelType() const;
      std::optional<double> sampleRate() const;
      std::optional<double> numThreads() const;
      NSString *provider() const;
      std::optional<bool> debug() const;

      SpecInitSpeakerIdConfig(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeSherpaOnnxSpec_SpecInitSpeakerIdConfig)
+ (RCTManagedPointer *)JS_NativeSherpaOnnxSpec_SpecInitSpeakerIdConfig:(id)json;
@end
@protocol NativeSherpaOnnxSpecSpec <RCTBridgeModule, RCTTurboModule>

- (void)validateLibraryLoaded:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;
- (void)testOnnxIntegration:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)createRecognizer:(JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig &)config
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)initTts:(JS::NativeSherpaOnnxSpec::SpecInitTtsConfig &)config
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)generateTts:(JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig &)config
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)stopTts:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)releaseTts:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)initAsr:(JS::NativeSherpaOnnxSpec::SpecInitAsrConfig &)config
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)recognizeFromSamples:(double)sampleRate
                     samples:(NSArray *)samples
                     resolve:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)recognizeFromFile:(NSString *)filePath
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)releaseAsr:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)initAudioTagging:(JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig &)config
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)processAndComputeAudioTagging:(NSString *)filePath
                              resolve:(RCTPromiseResolveBlock)resolve
                               reject:(RCTPromiseRejectBlock)reject;
- (void)processAndComputeAudioSamples:(double)sampleRate
                              samples:(NSArray *)samples
                              resolve:(RCTPromiseResolveBlock)resolve
                               reject:(RCTPromiseRejectBlock)reject;
- (void)releaseAudioTagging:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)initSpeakerId:(JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig &)config
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)processSpeakerIdSamples:(double)sampleRate
                        samples:(NSArray *)samples
                        resolve:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (void)computeSpeakerEmbedding:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (void)registerSpeaker:(NSString *)name
              embedding:(NSArray *)embedding
                resolve:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)removeSpeaker:(NSString *)name
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)getSpeakers:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)identifySpeaker:(NSArray *)embedding
              threshold:(double)threshold
                resolve:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject;
- (void)verifySpeaker:(NSString *)name
            embedding:(NSArray *)embedding
            threshold:(double)threshold
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)processSpeakerIdFile:(NSString *)filePath
                     resolve:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)releaseSpeakerId:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)extractTarBz2:(NSString *)sourcePath
            targetDir:(NSString *)targetDir
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeSherpaOnnxSpecSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeSherpaOnnxSpec'
   */
  class JSI_EXPORT NativeSherpaOnnxSpecSpecJSI : public ObjCTurboModule {
  public:
    NativeSherpaOnnxSpecSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::modelPath() const
{
  id const p = _v[@"modelPath"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::sampleRate() const
{
  id const p = _v[@"sampleRate"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::numThreads() const
{
  id const p = _v[@"numThreads"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::debug() const
{
  id const p = _v[@"debug"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::featureDim() const
{
  id const p = _v[@"featureDim"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::beamSize() const
{
  id const p = _v[@"beamSize"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::beamThreshold() const
{
  id const p = _v[@"beamThreshold"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::language() const
{
  id const p = _v[@"language"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::enableEndpoint() const
{
  id const p = _v[@"enableEndpoint"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecCreateRecognizerConfig::enableNonStreaming() const
{
  id const p = _v[@"enableNonStreaming"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::modelDir() const
{
  id const p = _v[@"modelDir"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::modelType() const
{
  id const p = _v[@"modelType"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::modelName() const
{
  id const p = _v[@"modelName"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::acousticModelName() const
{
  id const p = _v[@"acousticModelName"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::vocoder() const
{
  id const p = _v[@"vocoder"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::voices() const
{
  id const p = _v[@"voices"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::lexicon() const
{
  id const p = _v[@"lexicon"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::dataDir() const
{
  id const p = _v[@"dataDir"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::dictDir() const
{
  id const p = _v[@"dictDir"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::ruleFsts() const
{
  id const p = _v[@"ruleFsts"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::ruleFars() const
{
  id const p = _v[@"ruleFars"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::numThreads() const
{
  id const p = _v[@"numThreads"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::debug() const
{
  id const p = _v[@"debug"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::noiseScale() const
{
  id const p = _v[@"noiseScale"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::noiseScaleW() const
{
  id const p = _v[@"noiseScaleW"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitTtsConfig::lengthScale() const
{
  id const p = _v[@"lengthScale"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::text() const
{
  id const p = _v[@"text"];
  return RCTBridgingToString(p);
}
inline double JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::speakerId() const
{
  id const p = _v[@"speakerId"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::speakingRate() const
{
  id const p = _v[@"speakingRate"];
  return RCTBridgingToDouble(p);
}
inline bool JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::playAudio() const
{
  id const p = _v[@"playAudio"];
  return RCTBridgingToBool(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::fileNamePrefix() const
{
  id const p = _v[@"fileNamePrefix"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::lengthScale() const
{
  id const p = _v[@"lengthScale"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::noiseScale() const
{
  id const p = _v[@"noiseScale"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecGenerateTtsConfig::noiseScaleW() const
{
  id const p = _v[@"noiseScaleW"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAsrConfig::modelDir() const
{
  id const p = _v[@"modelDir"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAsrConfig::modelType() const
{
  id const p = _v[@"modelType"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAsrConfig::modelPath() const
{
  id const p = _v[@"modelPath"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitAsrConfig::numThreads() const
{
  id const p = _v[@"numThreads"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecInitAsrConfig::debug() const
{
  id const p = _v[@"debug"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::modelDir() const
{
  id const p = _v[@"modelDir"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::modelType() const
{
  id const p = _v[@"modelType"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::modelName() const
{
  id const p = _v[@"modelName"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::modelFile() const
{
  id const p = _v[@"modelFile"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::labelsFile() const
{
  id const p = _v[@"labelsFile"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::numThreads() const
{
  id const p = _v[@"numThreads"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::topK() const
{
  id const p = _v[@"topK"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecInitAudioTaggingConfig::debug() const
{
  id const p = _v[@"debug"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::modelDir() const
{
  id const p = _v[@"modelDir"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::modelFile() const
{
  id const p = _v[@"modelFile"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::modelType() const
{
  id const p = _v[@"modelType"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::sampleRate() const
{
  id const p = _v[@"sampleRate"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::numThreads() const
{
  id const p = _v[@"numThreads"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::provider() const
{
  id const p = _v[@"provider"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeSherpaOnnxSpec::SpecInitSpeakerIdConfig::debug() const
{
  id const p = _v[@"debug"];
  return RCTBridgingToOptionalBool(p);
}
NS_ASSUME_NONNULL_END
#endif // SherpaOnnxSpec_H
