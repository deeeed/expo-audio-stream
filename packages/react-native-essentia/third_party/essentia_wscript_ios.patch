diff --git i/wscript w/wscript
index 41680e49..65643f03 100644
--- i/wscript
+++ w/wscript
@@ -47,7 +47,7 @@ def options(ctx):
                    help='debug, release or default')
 
     ctx.add_option('--std', action='store',
-                   dest='STD', default='c++11',
+                   dest='STD', default='c++17',
                    help='C++ standard to compile for [c++11 c++14 c++17 ...]')
 
     ctx.add_option('--arch', action='store',
@@ -74,6 +74,14 @@ def options(ctx):
                    dest='CROSS_COMPILE_IOS_SIM', default=False,
                    help='cross-compile for iOS (i386)')
 
+    ctx.add_option('--cross-compile-ios-sim-x86_64', action='store_true',
+                   dest='CROSS_COMPILE_IOS_SIM_X86_64', default=False,
+                   help='cross-compile for iOS Simulator (x86_64)')
+
+    ctx.add_option('--cross-compile-ios-sim-arm64', action='store_true',
+                   dest='CROSS_COMPILE_IOS_SIM_ARM64', default=False,
+                   help='cross-compile for iOS Simulator (arm64)')
+
     ctx.add_option('--emscripten', action='store_true',
                    dest='EMSCRIPTEN', default=False,
                    help='compile Essentia to Javascript with Emscripten')
@@ -128,9 +136,11 @@ def configure(ctx):
     # force using SSE floating point (default for 64bit in gcc) instead of
     # 387 floating point (used for 32bit in gcc) to avoid numerical differences
     # between 32 and 64bit builds (see https://github.com/MTG/essentia/issues/179)
-    if (not ctx.options.EMSCRIPTEN and 
-        not ctx.options.CROSS_COMPILE_ANDROID and 
+    if (not ctx.options.EMSCRIPTEN and
+        not ctx.options.CROSS_COMPILE_ANDROID and
         not ctx.options.CROSS_COMPILE_IOS and
+        not ctx.options.CROSS_COMPILE_IOS_SIM and
+        not ctx.options.CROSS_COMPILE_IOS_SIM_ARM64 and
         not ctx.options.NO_MSSE and
         sys.platform != 'win32'):
         ctx.env.CXXFLAGS += ['-msse', '-msse2', '-mfpmath=sse']
@@ -220,7 +230,7 @@ def configure(ctx):
         # force the use of mingw gcc compiler instead of msvc
         #ctx.env.CC = 'gcc'
         #ctx.env.CXX = 'g++'
-        
+
         import distutils.dir_util
 
         print("copying pkgconfig ...")
@@ -246,31 +256,89 @@ def configure(ctx):
         ctx.env.LINKFLAGS += ['-Wl,-soname,libessentia.so', '-latomic']
 
     if ctx.options.CROSS_COMPILE_IOS:
-        print ("→ Cross-compiling for iOS (ARMv7 and ARM64)")
-        ctx.env.CXXFLAGS += ['-arch', 'armv7']
-        ctx.env.LINKFLAGS += ['-arch', 'armv7']
-        ctx.env.LDFLAGS += ['-arch', 'armv7']
+        print ("→ Cross-compiling for iOS (ARM64)")
         ctx.env.CXXFLAGS += ['-arch', 'arm64']
         ctx.env.LINKFLAGS += ['-arch', 'arm64']
-        ctx.env.LDFLAGS += ['-arch', 'armv64']
+        ctx.env.LDFLAGS += ['-arch', 'arm64']
+
+        # Get device SDK path dynamically
+        ios_sdk_path = os.popen('xcrun --sdk iphoneos --show-sdk-path').read().strip()
+        print(f"Using iOS device SDK: {ios_sdk_path}")
 
         ctx.env.CXXFLAGS += ['-stdlib=libc++']
-        ctx.env.CXXFLAGS += ['-miphoneos-version-min=5.0']
-        ctx.env.CXXFLAGS += ['-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk']
+        ctx.env.CXXFLAGS += ['-std=c++11']  # Changed from c++17 to c++11
+        ctx.env.CXXFLAGS += ['-miphoneos-version-min=15.0']
+        ctx.env.CXXFLAGS += ['-isysroot', ios_sdk_path]
         ctx.env.CXXFLAGS += ['-fembed-bitcode']
 
+        # Add TNT directory to includes for device too
+        ctx.env.CXXFLAGS += ['-I' + os.path.join(ctx.path.abspath(), 'src')]
+
     if ctx.options.CROSS_COMPILE_IOS_SIM:
-        print ("→ Cross-compiling for iOS Simulator (i386)")
-        ctx.env.CXXFLAGS += ['-arch', 'i386']
-        ctx.env.LINKFLAGS += ['-arch', 'i386']
-        ctx.env.LDFLAGS += ['-arch', 'i386']
+        print ("→ Cross-compiling for iOS Simulator")
+
+        # Get simulator SDK path dynamically
+        simulator_sdk_path = os.popen('xcrun --sdk iphonesimulator --show-sdk-path').read().strip()
+        print(f"Using simulator SDK: {simulator_sdk_path}")
+
+        # We'll completely remove architecture flags and let the build script handle them
+        # These flags are removed:
+        # ctx.env.CXXFLAGS += ['-arch', 'x86_64']
+        # ctx.env.LINKFLAGS += ['-arch', 'x86_64']
+        # ctx.env.LDFLAGS += ['-arch', 'x86_64']
+        # ctx.env.CXXFLAGS += ['-arch', 'arm64']
+        # ctx.env.LINKFLAGS += ['-arch', 'arm64']
+        # ctx.env.LDFLAGS += ['-arch', 'arm64']
+
+        ctx.env.CXXFLAGS += ['-stdlib=libc++']
+        ctx.env.CXXFLAGS += ['-std=c++11']
+        ctx.env.CXXFLAGS += ['-miphoneos-version-min=15.0']
+        ctx.env.CXXFLAGS += ['-isysroot', simulator_sdk_path]
+
+        # Add TNT directory to includes
+        ctx.env.CXXFLAGS += ['-I' + os.path.join(ctx.path.abspath(), 'src')]
+
+    if ctx.options.CROSS_COMPILE_IOS_SIM_X86_64:
+        print ("→ Cross-compiling for iOS Simulator (x86_64)")
+
+        # Get simulator SDK path dynamically
+        simulator_sdk_path = os.popen('xcrun --sdk iphonesimulator --show-sdk-path').read().strip()
+        print(f"Using simulator SDK: {simulator_sdk_path}")
+
+        # Override standard C++ version from the default
+        ctx.env.CXXFLAGS = ['-std=c++11']  # Replace the default standard
+
         ctx.env.CXXFLAGS += ['-arch', 'x86_64']
         ctx.env.LINKFLAGS += ['-arch', 'x86_64']
         ctx.env.LDFLAGS += ['-arch', 'x86_64']
 
         ctx.env.CXXFLAGS += ['-stdlib=libc++']
-        ctx.env.CXXFLAGS += ['-miphoneos-version-min=5.0']
-        ctx.env.CXXFLAGS += ['-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk']
+        ctx.env.CXXFLAGS += ['-miphoneos-version-min=15.0']
+        ctx.env.CXXFLAGS += ['-isysroot', simulator_sdk_path]
+
+        # Add TNT directory to includes
+        ctx.env.CXXFLAGS += ['-I' + os.path.join(ctx.path.abspath(), 'src')]
+
+    if ctx.options.CROSS_COMPILE_IOS_SIM_ARM64:
+        print ("→ Cross-compiling for iOS Simulator (arm64)")
+
+        # Get simulator SDK path dynamically
+        simulator_sdk_path = os.popen('xcrun --sdk iphonesimulator --show-sdk-path').read().strip()
+        print(f"Using simulator SDK: {simulator_sdk_path}")
+
+        # Override standard C++ version from the default
+        ctx.env.CXXFLAGS = ['-std=c++11']  # Replace the default standard
+
+        ctx.env.CXXFLAGS += ['-arch', 'arm64']
+        ctx.env.LINKFLAGS += ['-arch', 'arm64']
+        ctx.env.LDFLAGS += ['-arch', 'arm64']
+
+        ctx.env.CXXFLAGS += ['-stdlib=libc++']
+        ctx.env.CXXFLAGS += ['-miphoneos-version-min=15.0']
+        ctx.env.CXXFLAGS += ['-isysroot', simulator_sdk_path]
+
+        # Add TNT directory to includes
+        ctx.env.CXXFLAGS += ['-I' + os.path.join(ctx.path.abspath(), 'src')]
 
     # use manually prebuilt dependencies in the case of static examples or mingw cross-build
     if ctx.options.CROSS_COMPILE_MINGW32:
@@ -291,11 +359,11 @@ def configure(ctx):
     if ctx.env.STATIC_DEPENDENCIES \
         and (sys.platform.startswith('linux') or sys.platform == 'darwin') \
         and not ctx.options.CROSS_COMPILE_MINGW32:
-        
+
         if not ctx.env.ONLY_PYTHON:
             print ("→ Building with static dependencies on Linux/OSX")
             os.environ["PKG_CONFIG_PATH"] = 'packaging/debian_3rdparty/lib/pkgconfig'
-        
+
         # flags required for linking to static ffmpeg libs
         # -Bsymbolic flag is not available on clang
         if ctx.env.CXX_NAME is not "clang":
@@ -352,6 +420,6 @@ def doc(ctx):
     os.system('mkdir -p build/python')
     os.system('cp -r src/python/essentia build/python/')
     os.system('cp build/src/python/_essentia*.so build/python/essentia')
-    
+
     pythonpath = os.path.abspath('build/python')
     os.system('PYTHONPATH=%s doc/build_sphinx_doc.sh %s' % (pythonpath, sys.executable))
